apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "infominerva.fullname" . }}-frontend
  labels:
    {{- include "infominerva.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "infominerva.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "infominerva.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "infominerva.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Values.frontend.name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          command: ["npm"]
          args: ["start"] # Note: `npm start` is for development. Production React apps are usually built and served statically.
          ports:
            - name: http
              containerPort: {{ .Values.frontend.service.targetPort }}
              protocol: TCP
          resources:
            requests:
              cpu: "100m"
              memory: "250Mi"
            limits:
              cpu: "100m"
              memory: "250Mi"
          {{- if .Values.secrets.create }}
          envFrom:
            - secretRef:
                name: {{ include "infominerva.fullname" . }}-{{ .Values.secrets.frontend.nameSuffix }}
          {{- end }}
          {{- if .Values.frontend.env }}
          env:
            {{- range .Values.frontend.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- if and .Values.ingress.enabled (not (lookup "v1" "Secret" (printf "%s" (include "infominerva.fullname" . | toString)) (printf "%s-frontend-secrets" (include "infominerva.fullname" . | toString)) )) }}
            - name: REACT_APP_API_URL
              value: "{{ if (first .Values.ingress.tls) }}https{{ else }}http{{ end }}://{{ (first .Values.ingress.hosts).host }}{{ (index (first .Values.ingress.hosts).paths 1).path }}"
            {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}