name: Build, Push to Artifact Registry, and Deploy to GKE

on:
  push:
    branches:
      - main # Or your primary development branch, e.g., master
  # pull_request: # Uncomment to run on Pull Requests (e.g., for linting/testing, without deploy)
  #   branches:
  #     - main

env:
  # --- TODO: Configure these GCP and GKE variables ---
  GCP_PROJECT_ID: "infomineo" # Example, replace with your actual project ID
  GCP_ARTIFACT_REGISTRY_REGION: "europe-west1"
  GCP_ARTIFACT_REGISTRY_REPOSITORY: "infominerva"
  GKE_CLUSTER_NAME: "infominerva-cluster"
  GKE_CLUSTER_LOCATION: "europe-west1"

  # --- TODO: Configure these application and Helm specific variables ---
  BACKEND_IMAGE_NAME: "backend"
  FRONTEND_IMAGE_NAME: "frontend"

  # --- Image tag will be the Git commit SHA for uniqueness ---
  IMAGE_TAG: "${{ github.sha }}" # Using the full SHA for better uniqueness

  # --- Define Dockerfile paths and context ---
  DOCKER_BUILD_CONTEXT: "./bcg-knowledge-search-tool"
  BACKEND_DOCKERFILE_PATH: "./bcg-knowledge-search-tool/backend.Dockerfile"
  FRONTEND_DOCKERFILE_PATH: "./bcg-knowledge-search-tool/frontend.Dockerfile"


jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: infominerva
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation if you switch to it

    outputs: # Define outputs to pass to the deploy job
      backend_image_full_path: ${{ steps.image_paths.outputs.AR_BACKEND_IMAGE_FULL_PATH }}
      frontend_image_full_path: ${{ steps.image_paths.outputs.AR_FRONTEND_IMAGE_FULL_PATH }}
      image_tag: ${{ env.IMAGE_TAG }} # Pass the tag as it's defined in env

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (Service Account Key)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          # If you were using Workload Identity Federation, it would look like this:
          # workload_identity_provider: 'projects/YOUR_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID'
          # service_account: 'your-service-account-email@your-project-id.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev --quiet

      - name: Define Full Image Paths
        id: image_paths
        run: |
          echo "AR_BACKEND_IMAGE_FULL_PATH=${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "AR_FRONTEND_IMAGE_FULL_PATH=${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Build, Tag, and Push Backend Image
        env: # Make output available to this step's env context
            AR_BACKEND_IMAGE_FULL_PATH: ${{ steps.image_paths.outputs.AR_BACKEND_IMAGE_FULL_PATH }}
        run: |
          echo "Building backend image: ${AR_BACKEND_IMAGE_FULL_PATH}"
          echo "Using Dockerfile: ${{ env.BACKEND_DOCKERFILE_PATH }} with context: ${{ env.DOCKER_BUILD_CONTEXT }}"
          # Build and tag directly with the full Artifact Registry path
          docker build -f "${{ env.BACKEND_DOCKERFILE_PATH }}" -t "${AR_BACKEND_IMAGE_FULL_PATH}" "${{ env.DOCKER_BUILD_CONTEXT }}"
          
          echo "Pushing backend image to ${AR_BACKEND_IMAGE_FULL_PATH}..."
          docker push "${AR_BACKEND_IMAGE_FULL_PATH}"

      - name: Build, Tag, and Push Frontend Image
        env: # Make output available to this step's env context
            AR_FRONTEND_IMAGE_FULL_PATH: ${{ steps.image_paths.outputs.AR_FRONTEND_IMAGE_FULL_PATH }}
        run: |
          echo "Building frontend image: ${AR_FRONTEND_IMAGE_FULL_PATH}"
          echo "Using Dockerfile: ${{ env.FRONTEND_DOCKERFILE_PATH }} with context: ${{ env.DOCKER_BUILD_CONTEXT }}"
          # Build and tag directly with the full Artifact Registry path
          docker build -f "${{ env.FRONTEND_DOCKERFILE_PATH }}" -t "${AR_FRONTEND_IMAGE_FULL_PATH}" "${{ env.DOCKER_BUILD_CONTEXT }}"

          echo "Pushing frontend image to ${AR_FRONTEND_IMAGE_FULL_PATH}..."
          docker push "${AR_FRONTEND_IMAGE_FULL_PATH}"