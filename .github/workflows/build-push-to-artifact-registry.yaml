name: Build, Push to Artifact Registry, and Deploy to GKE

on:
  push:
    branches:
      - main
  # pull_request: # Uncomment to run on Pull Requests (e.g., for linting/testing, without deploy)
  #   branches:
  #     - main

env:
  # --- TODO: Configure these GCP and GKE variables ---
  GCP_PROJECT_ID: "infomineo"
  GCP_ARTIFACT_REGISTRY_REGION: "europe-west1" # e.g., us-central1, europe-west1
  GCP_ARTIFACT_REGISTRY_REPOSITORY: "infominerva" # The name of your Docker repository in Artifact Registry
  GKE_CLUSTER_NAME: "infominerva-cluster"
  GKE_CLUSTER_LOCATION: "europe-west1" # e.g., us-central1-a (for zonal) or us-central1 (for regional)

  # --- TODO: Configure these application and Helm specific variables ---
  BACKEND_IMAGE_NAME: "backend" # Name for your backend image in Artifact Registry
  FRONTEND_IMAGE_NAME: "frontend" # Name for your frontend image in Artifact Registry
  HELM_CHART_PATH: "./helm_chart" # Path to your Helm chart directory within the repository
  HELM_RELEASE_NAME: "infominerva" # Name for your Helm release
  HELM_NAMESPACE: "infominerva" # Kubernetes namespace for deployment (will be created if it doesn't exist)

  # --- Image tag will be the Git commit SHA for uniqueness ---
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: infominerva
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    outputs: # Define outputs to pass to the deploy job
      backend_image_full_path: ${{ steps.image_paths.outputs.AR_BACKEND_IMAGE_FULL_PATH }}
      frontend_image_full_path: ${{ steps.image_paths.outputs.AR_FRONTEND_IMAGE_FULL_PATH }}
      image_tag: ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- TODO: Configure Workload Identity Federation ---
      # Replace with your WIF provider and service account details.
      # See: https://github.com/google-github-actions/auth#setting-up-workload-identity-federation
      # - name: Authenticate to Google Cloud (Workload Identity Federation)
      #   id: auth
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     workload_identity_provider: 'projects/YOUR_GCP_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID' # e.g., projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/github-provider
      #     service_account: 'your-service-account-email@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com' # e.g., gha-runner@my-project.iam.gserviceaccount.com

      # --- Alternative: Authenticate using Service Account Key JSON (less recommended) ---
      # If using this, store your GCP_SA_KEY JSON as a GitHub Secret.
      - name: Authenticate to Google Cloud (Service Account Key)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

      - name: Define Full Image Paths
        id: image_paths
        run: |
          echo "AR_BACKEND_IMAGE_FULL_PATH=${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "AR_FRONTEND_IMAGE_FULL_PATH=${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Build, Tag, and Push Backend Image
        run: |
          echo "Building backend image: ${{ steps.image_paths.outputs.AR_BACKEND_IMAGE_FULL_PATH }}"
          docker build --target backend -t ${{ steps.image_paths.outputs.AR_BACKEND_IMAGE_FULL_PATH }} .
          echo "Pushing backend image..."
          docker push ${{ steps.image_paths.outputs.AR_BACKEND_IMAGE_FULL_PATH }}

      - name: Build, Tag, and Push Frontend Image
        run: |
          echo "Building frontend image: ${{ steps.image_paths.outputs.AR_FRONTEND_IMAGE_FULL_PATH }}"
          docker build --target frontend -t ${{ steps.image_paths.outputs.AR_FRONTEND_IMAGE_FULL_PATH }} .
          echo "Pushing frontend image..."
          docker push ${{ steps.image_paths.outputs.AR_FRONTEND_IMAGE_FULL_PATH }}